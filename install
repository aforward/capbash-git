#!/bin/bash
[[ -z "$INFO_LEVEL" ]] && source ./submodules/bootstrap/logging
set -euo pipefail ; IFS=$'\n\t'

#-----------
# Configurations
#-----------

export GIT_LOG_DIR=${GIT_LOG_DIR-/var/log}
GIT_APPS_DIR=${GIT_APPS_DIR-/var/local/apps}
GIT_REPO_NAME=${GIT_REPO_NAME-samplephp}
GIT_URL=${GIT_URL-https://github.com/aforward/samplephp}
GIT_REMOTE=${GIT_REMOTE-origin}
GIT_BRANCH=${GIT_BRANCH-master}
GIT_TAG=${GIT_TAG-$GIT_BRANCH}
GIT_OWNER=${GIT_OWNER-$USER}
GIT_MODE=${GIT_MODE-remote}

GIT_EMAIL=${GIT_EMAIL-server@localhost}
GIT_NAME=${GIT_NAME-server}

GIT_REPO_DIR=${GIT_APPS_DIR}/${GIT_REPO_NAME}

LOGLEVEL=${LOGLEVEL-1}

#-----------
# Install Script
#-----------

if [[ $LOGLEVEL -le $DEBUG_LEVEL ]]; then
  ./submodules/bootstrap/mkdir GIT_LOG_DIR
  GIT_OUTPUT=${GIT_LOG_DIR}/${GIT_REPO_NAME}.log
  echo "" > $GIT_OUTPUT
else
  GIT_OUTPUT=/dev/null
fi

if [[ "`which git 2> /dev/null`" == "" ]]; then
  notify "  -- Installing git"
  if [[ "$OS" == "redhat" ]] || [[ "$OS" == "centos" ]]; then
    debug "  -- Running 'yum install -y git-core'"
    yum install -y git-core
  else
    debug "  -- Running 'apt-get install -y git-core'"
    apt-get install -y git-core
  fi
else
  debug "  -- Git already installed"
fi

if [[ "`git config --global user.email`" == "" ]]; then
  git config --global user.email "$GIT_EMAIL"
  git config --global user.name "$GIT_NAME"
  debug "  -- git config --global user.email \"$GIT_EMAIL\""
  debug "  -- git config --global user.name \"$GIT_NAME\""
fi

if [[ "$GIT_OWNER" == "$USER" ]]; then
  ./submodules/bootstrap/mkdir GIT_APPS_DIR
else
  su $GIT_OWNER -c "mkdir -p $GIT_APPS_DIR"
fi

# NEW repository, so clone it
if [[ ! -e ${GIT_REPO_DIR} ]]; then
  notify "  -- Creating a new REPO ${GIT_REPO_DIR} (${GIT_BRANCH})..."
  # TODO: Andrew was able to get bash to only run 'su' if the user was difference
  if [[ "$GIT_OWNER" == "$USER" ]]; then
    (cd ${GIT_APPS_DIR} && GIT_ERRORS=$(git clone ${GIT_URL} ${GIT_REPO_NAME} > ${GIT_OUTPUT} 2>&1))
    debug_all ${GIT_OUTPUT}
    (cd ${GIT_APPS_DIR}/${GIT_REPO_NAME} && git checkout ${GIT_TAG} > ${GIT_OUTPUT} 2> /dev/null)
  else
    su $GIT_OWNER -c "(cd ${GIT_APPS_DIR} && git clone ${GIT_URL} ${GIT_REPO_NAME} >> ${GIT_OUTPUT} && cd ${GIT_REPO_NAME} && git checkout ${GIT_TAG} >> ${GIT_OUTPUT})"
  fi
  debug_all ${GIT_OUTPUT}

# HANDSOFF won't touch your code
elif [[ "$GIT_MODE" = handsoff ]]; then
  notify "  -- Repo ${GIT_REPO_DIR} already exists, but not touching (ideally on ${GIT_BRANCH})"

# FORCE an update, this will force Docker to skip the cache (not necessarily a good thing)
elif [[ "$GIT_MODE" = "force" ]]; then
  notify "  -- Forcing a reset to ${GIT_REPO_DIR} (${GIT_BRANCH})"
  su $GIT_OWNER -c "(cd ${GIT_REPO_DIR} && git checkout ${GIT_BRANCH} >> ${GIT_OUTPUT} && git fetch >> ${GIT_OUTPUT} && git reset --hard ${GIT_REMOTE}/${GIT_BRANCH} >> ${GIT_OUTPUT} && git checkout ${GIT_TAG} >> ${GIT_OUTPUT})"
  debug_all ${GIT_OUTPUT}

# BEST EFFORT to update to the latest of the branch
elif [[ "$GIT_TAG" == "$GIT_BRANCH" ]]; then

  if [[ "$GIT_MODE" == "local" ]]; then
    notify "  -- Checking out ${GIT_REPO_DIR} (${GIT_BRANCH})"
    if [[ "$GIT_OWNER" == "$USER" ]]; then
      (cd ${GIT_REPO_DIR} && git checkout ${GIT_BRANCH} 2> /dev/null >> ${GIT_OUTPUT} && git pull ${GIT_REMOTE} ${GIT_BRANCH} 2> /dev/null >> ${GIT_OUTPUT})
      debug_all ${GIT_OUTPUT}
    else
      su $GIT_OWNER -c "(cd ${GIT_REPO_DIR} && git checkout . >> ${GIT_OUTPUT} && git checkout ${GIT_BRANCH} 2> /dev/null >> ${GIT_OUTPUT} && git pull ${GIT_REMOTE} ${GIT_BRANCH} 2> /dev/null >> ${GIT_OUTPUT})"
      debug_all ${GIT_OUTPUT}
    fi
  else
    notify "  -- Force checking out ${GIT_REPO_DIR} (${GIT_BRANCH})"
    if [[ "$GIT_OWNER" == "$USER" ]]; then
      (cd ${GIT_REPO_DIR} && git checkout . >> ${GIT_OUTPUT} && git checkout ${GIT_BRANCH} 2> /dev/null >> ${GIT_OUTPUT} && git pull ${GIT_REMOTE} ${GIT_BRANCH} 2> /dev/null >> ${GIT_OUTPUT})
      debug_all ${GIT_OUTPUT}
    else
      su $GIT_OWNER -c "(cd ${GIT_REPO_DIR} && git checkout . >> ${GIT_OUTPUT} && git checkout ${GIT_BRANCH} 2> /dev/null >> ${GIT_OUTPUT} && git pull ${GIT_REMOTE} ${GIT_BRANCH} 2> /dev/null >> ${GIT_OUTPUT})"
      debug_all ${GIT_OUTPUT}
    fi
  fi

# ALEADY ON TAG, NOTHING TO DO
elif [[ "`cd ${GIT_REPO_DIR} && git name-rev --tags --name-only $(git rev-parse HEAD)`" == "$GIT_TAG" ]]; then
  debug "  -- Already on ${GIT_REPO_DIR} (${GIT_TAG})"

else
  notify "  -- Updating ${GIT_REPO_DIR} (${GIT_TAG})"
  su $GIT_OWNER -c "(cd ${GIT_REPO_DIR} && git checkout . >> ${GIT_OUTPUT} && git fetch >> ${GIT_OUTPUT} && git checkout ${GIT_TAG} >> ${GIT_OUTPUT})"
  debug_all ${GIT_OUTPUT}
fi

