#!/bin/bash

#-----------
# Configurations
#-----------

GIT_BASE_DIR=${GIT_BASE_DIR-/var/apps}
GIT_REPO_NAME=${GIT_REPO_NAME-samplephp}
GIT_URL=${GIT_URL-https://github.com/aforward/samplephp}
GIT_REMOTE=${GIT_REMOTE-origin}
GIT_BRANCH=${GIT_BRANCH-master}
GIT_FORCE=${GIT_BRANCH-false}

#-----------
# Install Script
#-----------

if [[ "`which git`" == "" ]]; then
  apt-get install -y git-core
fi

# NEW repository, so clone it
if [[ ! -e ${GIT_BASE_DIR}/${GIT_REPO_NAME} ]]; then
  echo "Creating a new REPO ${GIT_BASE_DIR}/${GIT_REPO_NAME} (${GIT_BRANCH})"
  (cd ${GIT_BASE_DIR} && git clone ${GIT_URL} ${GIT_REPO_NAME}) && git checkout ${GIT_BRANCH}

# FORCE an update, this will force Docker to skip the cache (not necessarily a good thing)
elif [[ "$GIT_FORCE" = true ]]; then
  echo "Forcing a reset to ${GIT_BASE_DIR}/${GIT_REPO_NAME} (${GIT_BRANCH})"
  (cd ${GIT_BASE_DIR}/${GIT_REPO_NAME} && git checkout ${GIT_BRANCH} && git fetch && git reset --hard ${GIT_REMOTE}/${GIT_BRANCH})

# BEST EFFORT to update to the latest verison without causing Docker to skip the cache
else
  echo "Checking out ${GIT_BASE_DIR}/${GIT_REPO_NAME} (${GIT_BRANCH})"
  (cd ${GIT_BASE_DIR}/${GIT_REPO_NAME} && git checkout . && git checkout ${GIT_BRANCH} && git pull ${GIT_REMOTE} ${GIT_BRANCH})
fi
